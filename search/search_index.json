{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi Store RDBMS The siddhi-store-rdbms extension is an extension to Siddhi that persist and retrieve events to/from RDBMS databases such as MySQL, MS SQL, PostgreSQL, H2 and Oracle. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 7.x 6.x and above with group id io.siddhi.extension.* from here . Versions 5.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 7.0.19 . Features cud ( Stream Processor ) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. procedure ( Stream Processor ) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. query ( Stream Processor ) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. rdbms ( Store ) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Dependencies JDBC connector jar should be added to the runtime. Download the JDBC connector jar based on the RDBMS type that is connected through the Siddhi store. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Running Integration tests in docker containers(Optional) The RDBMS functionality are tested with the docker base integration test framework, except the H2 default embedded database is not uses external docker container. The test framework initialize the docker container for each database according to the given profile before execute the test suit. Start integration tests Install and run docker in daemon mode. Installing docker on Linux, Note: These commands retrieve content from get.docker.com web in a quiet output-document mode and install. wget -qO- https://get.docker.com/ | sh On installing docker on Mac, see Get started with Docker for Mac On installing docker on Windows, see Get started with Docker for Windows To run the integration test, navigate to the siddhi-store-rdbms/ directory and issue the following commands. H2 default: mvn clean install Note : h2 is the default activated profile as it is not used docker. MySQL 5.7: mvn verify -P local-mysql -f /component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true Postgres 9.6: mvn verify -P local-postgres -f /component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true MSSQL CTP 2.0: mvn verify -P local-mssql -f /component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true Oracle 11.2.0.2 Express Edition: mvn verify -P local-oracle -f component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true Oracle 12.1.0.2 Standard Edition: Download Oracle driver version 12.1.0.2 ojdbc7.jar To install the JAR file as a Maven plugin, issue the following command: mvn install:install-file -Dfile=/tmp/ojdbc7.jar -DgroupId=com.oracle -DartifactId=ojdbc7 -Dversion=12.1.0.2 -Dpackaging=jar Uncomment the following test dependency in the /component/pom.xml file as shown below: dependency groupId com.oracle /groupId artifactId ojdbc7 /artifactId scope test /scope version 12.1.0.2 /version /dependency To run the integration test, navigate to siddhi-store-rdbms/ directory and issue the following commands: mvn verify -P local-oracle12 -f component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true DB2 Download DB2 driver version 4.19.26 db2jcc4.jar To install the JAR file as a Maven plugin, issue the following command: mvn install:install-file -Dfile=/tmp/db2jcc4.jar -DgroupId=com.ibm.db2 -DartifactId=db2jcc -Dversion=4.19.26 -Dpackaging=jar Uncomment the following test dependency in the /component/pom.xml file as shown below: dependency groupId com.ibm.db2 /groupId artifactId db2jcc /artifactId scope test /scope version 4.19.26 /version /dependency To run the integration test, navigate to siddhi-store-rdbms/ directory and issue the following commands: mvn verify -P local-db2 -f /component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true Start integration tests in debug mode mvn -P local-mysql -Dmaven.failsafe.debug verify Note: local-mysql is the profile. Use other profiles accordingly. Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-store-rdbms","text":"The siddhi-store-rdbms extension is an extension to Siddhi that persist and retrieve events to/from RDBMS databases such as MySQL, MS SQL, PostgreSQL, H2 and Oracle. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi Store RDBMS"},{"location":"#download","text":"Versions 7.x 6.x and above with group id io.siddhi.extension.* from here . Versions 5.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 7.0.19 .","title":"Latest API Docs"},{"location":"#features","text":"cud ( Stream Processor ) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. procedure ( Stream Processor ) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. query ( Stream Processor ) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. rdbms ( Store ) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration","title":"Features"},{"location":"#dependencies","text":"JDBC connector jar should be added to the runtime. Download the JDBC connector jar based on the RDBMS type that is connected through the Siddhi store.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#running-integration-tests-in-docker-containersoptional","text":"The RDBMS functionality are tested with the docker base integration test framework, except the H2 default embedded database is not uses external docker container. The test framework initialize the docker container for each database according to the given profile before execute the test suit. Start integration tests Install and run docker in daemon mode. Installing docker on Linux, Note: These commands retrieve content from get.docker.com web in a quiet output-document mode and install. wget -qO- https://get.docker.com/ | sh On installing docker on Mac, see Get started with Docker for Mac On installing docker on Windows, see Get started with Docker for Windows To run the integration test, navigate to the siddhi-store-rdbms/ directory and issue the following commands. H2 default: mvn clean install Note : h2 is the default activated profile as it is not used docker. MySQL 5.7: mvn verify -P local-mysql -f /component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true Postgres 9.6: mvn verify -P local-postgres -f /component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true MSSQL CTP 2.0: mvn verify -P local-mssql -f /component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true Oracle 11.2.0.2 Express Edition: mvn verify -P local-oracle -f component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true Oracle 12.1.0.2 Standard Edition: Download Oracle driver version 12.1.0.2 ojdbc7.jar To install the JAR file as a Maven plugin, issue the following command: mvn install:install-file -Dfile=/tmp/ojdbc7.jar -DgroupId=com.oracle -DartifactId=ojdbc7 -Dversion=12.1.0.2 -Dpackaging=jar Uncomment the following test dependency in the /component/pom.xml file as shown below: dependency groupId com.oracle /groupId artifactId ojdbc7 /artifactId scope test /scope version 12.1.0.2 /version /dependency To run the integration test, navigate to siddhi-store-rdbms/ directory and issue the following commands: mvn verify -P local-oracle12 -f component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true DB2 Download DB2 driver version 4.19.26 db2jcc4.jar To install the JAR file as a Maven plugin, issue the following command: mvn install:install-file -Dfile=/tmp/db2jcc4.jar -DgroupId=com.ibm.db2 -DartifactId=db2jcc -Dversion=4.19.26 -Dpackaging=jar Uncomment the following test dependency in the /component/pom.xml file as shown below: dependency groupId com.ibm.db2 /groupId artifactId db2jcc /artifactId scope test /scope version 4.19.26 /version /dependency To run the integration test, navigate to siddhi-store-rdbms/ directory and issue the following commands: mvn verify -P local-db2 -f /component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true Start integration tests in debug mode mvn -P local-mysql -Dmaven.failsafe.debug verify Note: local-mysql is the profile. Use other profiles accordingly.","title":"Running Integration tests in docker containers(Optional)"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/4.0.1/","text":"API Docs - v4.0.1 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2.* : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.1"},{"location":"api/4.0.1/#api-docs-v401","text":"","title":"API Docs - v4.0.1"},{"location":"api/4.0.1/#store","text":"","title":"Store"},{"location":"api/4.0.1/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2.* : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.10/","text":"API Docs - v4.0.10 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.10"},{"location":"api/4.0.10/#api-docs-v4010","text":"","title":"API Docs - v4.0.10"},{"location":"api/4.0.10/#store","text":"","title":"Store"},{"location":"api/4.0.10/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.11/","text":"API Docs - v4.0.11 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.11"},{"location":"api/4.0.11/#api-docs-v4011","text":"","title":"API Docs - v4.0.11"},{"location":"api/4.0.11/#store","text":"","title":"Store"},{"location":"api/4.0.11/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.12/","text":"API Docs - v4.0.12 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.12"},{"location":"api/4.0.12/#api-docs-v4012","text":"","title":"API Docs - v4.0.12"},{"location":"api/4.0.12/#store","text":"","title":"Store"},{"location":"api/4.0.12/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.13/","text":"API Docs - v4.0.13 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.13"},{"location":"api/4.0.13/#api-docs-v4013","text":"","title":"API Docs - v4.0.13"},{"location":"api/4.0.13/#store","text":"","title":"Store"},{"location":"api/4.0.13/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.14/","text":"API Docs - v4.0.14 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.14"},{"location":"api/4.0.14/#api-docs-v4014","text":"","title":"API Docs - v4.0.14"},{"location":"api/4.0.14/#store","text":"","title":"Store"},{"location":"api/4.0.14/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.15/","text":"API Docs - v4.0.15 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.15"},{"location":"api/4.0.15/#api-docs-v4015","text":"","title":"API Docs - v4.0.15"},{"location":"api/4.0.15/#store","text":"","title":"Store"},{"location":"api/4.0.15/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.16/","text":"API Docs - v4.0.16 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.16"},{"location":"api/4.0.16/#api-docs-v4016","text":"","title":"API Docs - v4.0.16"},{"location":"api/4.0.16/#store","text":"","title":"Store"},{"location":"api/4.0.16/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.17/","text":"API Docs - v4.0.17 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.17"},{"location":"api/4.0.17/#api-docs-v4017","text":"","title":"API Docs - v4.0.17"},{"location":"api/4.0.17/#store","text":"","title":"Store"},{"location":"api/4.0.17/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.18/","text":"API Docs - v4.0.18 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.18"},{"location":"api/4.0.18/#api-docs-v4018","text":"","title":"API Docs - v4.0.18"},{"location":"api/4.0.18/#store","text":"","title":"Store"},{"location":"api/4.0.18/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.19/","text":"API Docs - v4.0.19 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.19"},{"location":"api/4.0.19/#api-docs-v4019","text":"","title":"API Docs - v4.0.19"},{"location":"api/4.0.19/#store","text":"","title":"Store"},{"location":"api/4.0.19/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.2/","text":"API Docs - v4.0.2 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2.* : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.2"},{"location":"api/4.0.2/#api-docs-v402","text":"","title":"API Docs - v4.0.2"},{"location":"api/4.0.2/#store","text":"","title":"Store"},{"location":"api/4.0.2/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2.* : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.20/","text":"API Docs - v4.0.20 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.20"},{"location":"api/4.0.20/#api-docs-v4020","text":"","title":"API Docs - v4.0.20"},{"location":"api/4.0.20/#store","text":"","title":"Store"},{"location":"api/4.0.20/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.21/","text":"API Docs - v4.0.21 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.21"},{"location":"api/4.0.21/#api-docs-v4021","text":"","title":"API Docs - v4.0.21"},{"location":"api/4.0.21/#store","text":"","title":"Store"},{"location":"api/4.0.21/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.22/","text":"API Docs - v4.0.22 Rdbms cud (Stream Processor) The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated. query (Stream Processor) The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.22"},{"location":"api/4.0.22/#api-docs-v4022","text":"","title":"API Docs - v4.0.22"},{"location":"api/4.0.22/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.22/#cud-stream-processor","text":"The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.","title":"cud (Stream Processor)"},{"location":"api/4.0.22/#query-stream-processor","text":"The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.22/#store","text":"","title":"Store"},{"location":"api/4.0.22/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.23/","text":"API Docs - v4.0.23 Rdbms cud (Stream Processor) The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated. query (Stream Processor) The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.23"},{"location":"api/4.0.23/#api-docs-v4023","text":"","title":"API Docs - v4.0.23"},{"location":"api/4.0.23/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.23/#cud-stream-processor","text":"The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.","title":"cud (Stream Processor)"},{"location":"api/4.0.23/#query-stream-processor","text":"The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.23/#store","text":"","title":"Store"},{"location":"api/4.0.23/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.24/","text":"API Docs - v4.0.24 Rdbms cud (Stream Processor) The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated. query (Stream Processor) The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.24"},{"location":"api/4.0.24/#api-docs-v4024","text":"","title":"API Docs - v4.0.24"},{"location":"api/4.0.24/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.24/#cud-stream-processor","text":"The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.","title":"cud (Stream Processor)"},{"location":"api/4.0.24/#query-stream-processor","text":"The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.24/#store","text":"","title":"Store"},{"location":"api/4.0.24/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.25/","text":"API Docs - v4.0.25 Rdbms cud (Stream Processor) The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated. query (Stream Processor) The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. Each required field must be provided as a key value pair in the form of field.name : length and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.25"},{"location":"api/4.0.25/#api-docs-v4025","text":"","title":"API Docs - v4.0.25"},{"location":"api/4.0.25/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.25/#cud-stream-processor","text":"The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.","title":"cud (Stream Processor)"},{"location":"api/4.0.25/#query-stream-processor","text":"The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.25/#store","text":"","title":"Store"},{"location":"api/4.0.25/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. Each required field must be provided as a key value pair in the form of field.name : length and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.26/","text":"API Docs - v4.0.26 Rdbms cud (Stream Processor) The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated. query (Stream Processor) The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. Each required field must be provided as a key value pair in the form of field.name : length and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.26"},{"location":"api/4.0.26/#api-docs-v4026","text":"","title":"API Docs - v4.0.26"},{"location":"api/4.0.26/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.26/#cud-stream-processor","text":"The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.","title":"cud (Stream Processor)"},{"location":"api/4.0.26/#query-stream-processor","text":"The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.26/#store","text":"","title":"Store"},{"location":"api/4.0.26/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. Each required field must be provided as a key value pair in the form of field.name : length and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.27/","text":"API Docs - v4.0.27 Rdbms cud (Stream Processor) The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated. query (Stream Processor) The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. Each required field must be provided as a key value pair in the form of field.name : length and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). Then the table is join with the InputStream based on a condition. In the on condition following operations are supported [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.27"},{"location":"api/4.0.27/#api-docs-v4027","text":"","title":"API Docs - v4.0.27"},{"location":"api/4.0.27/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.27/#cud-stream-processor","text":"The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.","title":"cud (Stream Processor)"},{"location":"api/4.0.27/#query-stream-processor","text":"The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.27/#store","text":"","title":"Store"},{"location":"api/4.0.27/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. Each required field must be provided as a key value pair in the form of field.name : length and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). Then the table is join with the InputStream based on a condition. In the on condition following operations are supported [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.28/","text":"API Docs - v4.0.28 Rdbms cud (Stream Processor) The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated. query (Stream Processor) The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. Each required field must be provided as a key value pair in the form of field.name : length and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). Then the table is join with the InputStream based on a condition. In the on condition following operations are supported [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.28"},{"location":"api/4.0.28/#api-docs-v4028","text":"","title":"API Docs - v4.0.28"},{"location":"api/4.0.28/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.28/#cud-stream-processor","text":"The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.","title":"cud (Stream Processor)"},{"location":"api/4.0.28/#query-stream-processor","text":"The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.28/#store","text":"","title":"Store"},{"location":"api/4.0.28/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. Each required field must be provided as a key value pair in the form of field.name : length and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). Then the table is join with the InputStream based on a condition. In the on condition following operations are supported [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.29/","text":"API Docs - v4.0.29 Rdbms cud (Stream Processor) The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated. query (Stream Processor) The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. Each required field must be provided as a key value pair in the form of field.name : length and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). Then the table is join with the InputStream based on a condition. In the on condition following operations are supported [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.29"},{"location":"api/4.0.29/#api-docs-v4029","text":"","title":"API Docs - v4.0.29"},{"location":"api/4.0.29/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.29/#cud-stream-processor","text":"The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations Enable/Disable performing CUD operations through rdbms cud function false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into recordStream; Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.","title":"cud (Stream Processor)"},{"location":"api/4.0.29/#query-stream-processor","text":"The function can be used to perform SQL retrieval queries on a WSO2 datasource. Note: This will only work within WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource on which the query should be performed on STRING No No query The select query(formatted according to the appropriate database type) that needs to be performed STRING No No attribute.definition.list Comma separated list of AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be STRING , INT , LONG , DOUBLE , FLOAT , BOOL . Mapping of the Siddhi data type to database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.29/#store","text":"","title":"Store"},{"location":"api/4.0.29/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. Each required field must be provided as a key value pair in the form of field.name : length and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). Then the table is join with the InputStream based on a condition. In the on condition following operations are supported [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.3/","text":"API Docs - v4.0.3 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2.* : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.3"},{"location":"api/4.0.3/#api-docs-v403","text":"","title":"API Docs - v4.0.3"},{"location":"api/4.0.3/#store","text":"","title":"Store"},{"location":"api/4.0.3/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2.* : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.30/","text":"API Docs - v4.0.30 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.30"},{"location":"api/4.0.30/#api-docs-v4030","text":"","title":"API Docs - v4.0.30"},{"location":"api/4.0.30/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.30/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.","title":"cud (Stream Processor)"},{"location":"api/4.0.30/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.30/#store","text":"","title":"Store"},{"location":"api/4.0.30/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.31/","text":"API Docs - v4.0.31 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.31"},{"location":"api/4.0.31/#api-docs-v4031","text":"","title":"API Docs - v4.0.31"},{"location":"api/4.0.31/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.31/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.","title":"cud (Stream Processor)"},{"location":"api/4.0.31/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.31/#store","text":"","title":"Store"},{"location":"api/4.0.31/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.32/","text":"API Docs - v4.0.32 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.32"},{"location":"api/4.0.32/#api-docs-v4032","text":"","title":"API Docs - v4.0.32"},{"location":"api/4.0.32/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.32/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.","title":"cud (Stream Processor)"},{"location":"api/4.0.32/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.32/#store","text":"","title":"Store"},{"location":"api/4.0.32/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.33/","text":"API Docs - v4.0.33 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.33"},{"location":"api/4.0.33/#api-docs-v4033","text":"","title":"API Docs - v4.0.33"},{"location":"api/4.0.33/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.33/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.","title":"cud (Stream Processor)"},{"location":"api/4.0.33/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.33/#store","text":"","title":"Store"},{"location":"api/4.0.33/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.34/","text":"API Docs - v4.0.34 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.34"},{"location":"api/4.0.34/#api-docs-v4034","text":"","title":"API Docs - v4.0.34"},{"location":"api/4.0.34/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.34/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.","title":"cud (Stream Processor)"},{"location":"api/4.0.34/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.34/#store","text":"","title":"Store"},{"location":"api/4.0.34/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.35/","text":"API Docs - v4.0.35 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.35"},{"location":"api/4.0.35/#api-docs-v4035","text":"","title":"API Docs - v4.0.35"},{"location":"api/4.0.35/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.35/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.","title":"cud (Stream Processor)"},{"location":"api/4.0.35/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.35/#store","text":"","title":"Store"},{"location":"api/4.0.35/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.36/","text":"API Docs - v4.0.36 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.36"},{"location":"api/4.0.36/#api-docs-v4036","text":"","title":"API Docs - v4.0.36"},{"location":"api/4.0.36/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.36/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.","title":"cud (Stream Processor)"},{"location":"api/4.0.36/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.36/#store","text":"","title":"Store"},{"location":"api/4.0.36/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.37/","text":"API Docs - v4.0.37 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.37"},{"location":"api/4.0.37/#api-docs-v4037","text":"","title":"API Docs - v4.0.37"},{"location":"api/4.0.37/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.37/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.","title":"cud (Stream Processor)"},{"location":"api/4.0.37/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.37/#store","text":"","title":"Store"},{"location":"api/4.0.37/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.38/","text":"API Docs - v4.0.38 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.38"},{"location":"api/4.0.38/#api-docs-v4038","text":"","title":"API Docs - v4.0.38"},{"location":"api/4.0.38/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.38/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.","title":"cud (Stream Processor)"},{"location":"api/4.0.38/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount).","title":"query (Stream Processor)"},{"location":"api/4.0.38/#store","text":"","title":"Store"},{"location":"api/4.0.38/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.39/","text":"API Docs - v4.0.39 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.39"},{"location":"api/4.0.39/#api-docs-v4039","text":"","title":"API Docs - v4.0.39"},{"location":"api/4.0.39/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.39/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.39/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.39/#store","text":"","title":"Store"},{"location":"api/4.0.39/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.4/","text":"API Docs - v4.0.4 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2.* : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.4"},{"location":"api/4.0.4/#api-docs-v404","text":"","title":"API Docs - v4.0.4"},{"location":"api/4.0.4/#store","text":"","title":"Store"},{"location":"api/4.0.4/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2.* : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.40/","text":"API Docs - v4.0.40 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.40"},{"location":"api/4.0.40/#api-docs-v4040","text":"","title":"API Docs - v4.0.40"},{"location":"api/4.0.40/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.40/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.40/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.40/#store","text":"","title":"Store"},{"location":"api/4.0.40/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.41/","text":"API Docs - v4.0.41 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.41"},{"location":"api/4.0.41/#api-docs-v4041","text":"","title":"API Docs - v4.0.41"},{"location":"api/4.0.41/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.41/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.41/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.41/#store","text":"","title":"Store"},{"location":"api/4.0.41/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.42/","text":"API Docs - v4.0.42 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.42"},{"location":"api/4.0.42/#api-docs-v4042","text":"","title":"API Docs - v4.0.42"},{"location":"api/4.0.42/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.42/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.42/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.42/#store","text":"","title":"Store"},{"location":"api/4.0.42/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.43/","text":"API Docs - v4.0.43 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.43"},{"location":"api/4.0.43/#api-docs-v4043","text":"","title":"API Docs - v4.0.43"},{"location":"api/4.0.43/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.43/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.43/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.43/#store","text":"","title":"Store"},{"location":"api/4.0.43/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.44/","text":"API Docs - v4.0.44 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.44"},{"location":"api/4.0.44/#api-docs-v4044","text":"","title":"API Docs - v4.0.44"},{"location":"api/4.0.44/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.44/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.44/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.44/#store","text":"","title":"Store"},{"location":"api/4.0.44/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.45/","text":"API Docs - v4.0.45 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.45"},{"location":"api/4.0.45/#api-docs-v4045","text":"","title":"API Docs - v4.0.45"},{"location":"api/4.0.45/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.45/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.45/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.45/#store","text":"","title":"Store"},{"location":"api/4.0.45/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.46/","text":"API Docs - v4.0.46 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.46"},{"location":"api/4.0.46/#api-docs-v4046","text":"","title":"API Docs - v4.0.46"},{"location":"api/4.0.46/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.46/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.46/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.46/#store","text":"","title":"Store"},{"location":"api/4.0.46/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.47/","text":"API Docs - v4.0.47 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.47"},{"location":"api/4.0.47/#api-docs-v4047","text":"","title":"API Docs - v4.0.47"},{"location":"api/4.0.47/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.47/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.47/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.47/#store","text":"","title":"Store"},{"location":"api/4.0.47/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.48/","text":"API Docs - v4.0.48 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.48"},{"location":"api/4.0.48/#api-docs-v4048","text":"","title":"API Docs - v4.0.48"},{"location":"api/4.0.48/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.48/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.48/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.48/#store","text":"","title":"Store"},{"location":"api/4.0.48/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.49/","text":"API Docs - v4.0.49 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.49"},{"location":"api/4.0.49/#api-docs-v4049","text":"","title":"API Docs - v4.0.49"},{"location":"api/4.0.49/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.49/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.49/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.49/#store","text":"","title":"Store"},{"location":"api/4.0.49/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.5/","text":"API Docs - v4.0.5 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.5"},{"location":"api/4.0.5/#api-docs-v405","text":"","title":"API Docs - v4.0.5"},{"location":"api/4.0.5/#store","text":"","title":"Store"},{"location":"api/4.0.5/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.50/","text":"API Docs - v4.0.50 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.50"},{"location":"api/4.0.50/#api-docs-v4050","text":"","title":"API Docs - v4.0.50"},{"location":"api/4.0.50/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.50/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.50/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.50/#store","text":"","title":"Store"},{"location":"api/4.0.50/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.51/","text":"API Docs - v4.0.51 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"4.0.51"},{"location":"api/4.0.51/#api-docs-v4051","text":"","title":"API Docs - v4.0.51"},{"location":"api/4.0.51/#rdbms","text":"","title":"Rdbms"},{"location":"api/4.0.51/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/4.0.51/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/4.0.51/#store","text":"","title":"Store"},{"location":"api/4.0.51/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/4.0.6/","text":"API Docs - v4.0.6 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.6"},{"location":"api/4.0.6/#api-docs-v406","text":"","title":"API Docs - v4.0.6"},{"location":"api/4.0.6/#store","text":"","title":"Store"},{"location":"api/4.0.6/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.7/","text":"API Docs - v4.0.7 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.7"},{"location":"api/4.0.7/#api-docs-v407","text":"","title":"API Docs - v4.0.7"},{"location":"api/4.0.7/#store","text":"","title":"Store"},{"location":"api/4.0.7/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.8/","text":"API Docs - v4.0.8 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.8"},{"location":"api/4.0.8/#api-docs-v408","text":"","title":"API Docs - v4.0.8"},{"location":"api/4.0.8/#store","text":"","title":"Store"},{"location":"api/4.0.8/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/4.0.9/","text":"API Docs - v4.0.9 Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"4.0.9"},{"location":"api/4.0.9/#api-docs-v409","text":"","title":"API Docs - v4.0.9"},{"location":"api/4.0.9/#store","text":"","title":"Store"},{"location":"api/4.0.9/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the STRING type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the check table operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the create table operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the create index operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the insert record operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the update record operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the select record operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the check record existence operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the delete record operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether Update and Insert operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long); The above example creates an event table named StockTable on the DB if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a DB index is created for it.","title":"rdbms (Store)"},{"location":"api/5.0.0/","text":"API Docs - v5.0.0 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"5.0.0"},{"location":"api/5.0.0/#api-docs-v500","text":"","title":"API Docs - v5.0.0"},{"location":"api/5.0.0/#rdbms","text":"","title":"Rdbms"},{"location":"api/5.0.0/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/5.0.0/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/5.0.0/#store","text":"","title":"Store"},{"location":"api/5.0.0/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/5.1.0/","text":"API Docs - v5.1.0 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"5.1.0"},{"location":"api/5.1.0/#api-docs-v510","text":"","title":"API Docs - v5.1.0"},{"location":"api/5.1.0/#rdbms","text":"","title":"Rdbms"},{"location":"api/5.1.0/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/5.1.0/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/5.1.0/#store","text":"","title":"Store"},{"location":"api/5.1.0/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/5.1.1/","text":"API Docs - v5.1.1 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"5.1.1"},{"location":"api/5.1.1/#api-docs-v511","text":"","title":"API Docs - v5.1.1"},{"location":"api/5.1.1/#rdbms","text":"","title":"Rdbms"},{"location":"api/5.1.1/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/5.1.1/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/5.1.1/#store","text":"","title":"Store"},{"location":"api/5.1.1/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/5.1.2/","text":"API Docs - v5.1.2 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"5.1.2"},{"location":"api/5.1.2/#api-docs-v512","text":"","title":"API Docs - v5.1.2"},{"location":"api/5.1.2/#rdbms","text":"","title":"Rdbms"},{"location":"api/5.1.2/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/5.1.2/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/5.1.2/#store","text":"","title":"Store"},{"location":"api/5.1.2/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/5.1.3/","text":"API Docs - v5.1.3 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"5.1.3"},{"location":"api/5.1.3/#api-docs-v513","text":"","title":"API Docs - v5.1.3"},{"location":"api/5.1.3/#rdbms","text":"","title":"Rdbms"},{"location":"api/5.1.3/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/5.1.3/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/5.1.3/#store","text":"","title":"Store"},{"location":"api/5.1.3/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/5.1.4/","text":"API Docs - v5.1.4 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"5.1.4"},{"location":"api/5.1.4/#api-docs-v514","text":"","title":"API Docs - v5.1.4"},{"location":"api/5.1.4/#rdbms","text":"","title":"Rdbms"},{"location":"api/5.1.4/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/5.1.4/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/5.1.4/#store","text":"","title":"Store"},{"location":"api/5.1.4/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/5.1.5/","text":"API Docs - v5.1.5 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"5.1.5"},{"location":"api/5.1.5/#api-docs-v515","text":"","title":"API Docs - v5.1.5"},{"location":"api/5.1.5/#rdbms","text":"","title":"Rdbms"},{"location":"api/5.1.5/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/5.1.5/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/5.1.5/#store","text":"","title":"Store"},{"location":"api/5.1.5/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/5.1.6/","text":"API Docs - v5.1.6 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"5.1.6"},{"location":"api/5.1.6/#api-docs-v516","text":"","title":"API Docs - v5.1.6"},{"location":"api/5.1.6/#rdbms","text":"","title":"Rdbms"},{"location":"api/5.1.6/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/5.1.6/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/5.1.6/#store","text":"","title":"Store"},{"location":"api/5.1.6/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/6.0.0/","text":"API Docs - v6.0.0 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"6.0.0"},{"location":"api/6.0.0/#api-docs-v600","text":"","title":"API Docs - v6.0.0"},{"location":"api/6.0.0/#rdbms","text":"","title":"Rdbms"},{"location":"api/6.0.0/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/6.0.0/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/6.0.0/#store","text":"","title":"Store"},{"location":"api/6.0.0/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/6.0.1/","text":"API Docs - v6.0.1 Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"6.0.1"},{"location":"api/6.0.1/#api-docs-v601","text":"","title":"API Docs - v6.0.1"},{"location":"api/6.0.1/#rdbms","text":"","title":"Rdbms"},{"location":"api/6.0.1/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/6.0.1/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/6.0.1/#store","text":"","title":"Store"},{"location":"api/6.0.1/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/6.0.2/","text":"API Docs - v6.0.2 Tested Siddhi Core version: 5.1.0 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"6.0.2"},{"location":"api/6.0.2/#api-docs-v602","text":"Tested Siddhi Core version: 5.1.0 It could also support other Siddhi Core minor versions.","title":"API Docs - v6.0.2"},{"location":"api/6.0.2/#rdbms","text":"","title":"Rdbms"},{"location":"api/6.0.2/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/6.0.2/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/6.0.2/#store","text":"","title":"Store"},{"location":"api/6.0.2/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/6.0.3/","text":"API Docs - v6.0.3 Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"6.0.3"},{"location":"api/6.0.3/#api-docs-v603","text":"Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v6.0.3"},{"location":"api/6.0.3/#rdbms","text":"","title":"Rdbms"},{"location":"api/6.0.3/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query, STRING parameter.n) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/6.0.3/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING parameter.n, STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No No parameter.n If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/6.0.3/#store","text":"","title":"Store"},{"location":"api/6.0.3/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( volume ) define table StockTable (symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/6.0.4/","text":"API Docs - v6.0.4 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) rdbms:query( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING attribute.definition.list) rdbms:query( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"6.0.4"},{"location":"api/6.0.4/#api-docs-v604","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v6.0.4"},{"location":"api/6.0.4/#rdbms","text":"","title":"Rdbms"},{"location":"api/6.0.4/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No No parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/6.0.4/#query-stream-processor","text":"This function performs SQL retrieval queries on WSO2 datasources. Note: This function is only available when running Siddhi with WSO2 SP. Syntax rdbms:query( STRING datasource.name, STRING query, STRING attribute.definition.list) rdbms:query( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING attribute.definition.list) rdbms:query( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., STRING attribute.definition.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the WSO2 datasource for which the query should be performed. STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from Transactions_Table', 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'select * from where country=? ', countrySearchWord, 'creditcardno string, country string, transaction string, amount int') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/6.0.4/#store","text":"","title":"Store"},{"location":"api/6.0.4/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.0/","text":"API Docs - v7.0.0 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.0"},{"location":"api/7.0.0/#api-docs-v700","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.0"},{"location":"api/7.0.0/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.0/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.0/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/7.0.0/#store","text":"","title":"Store"},{"location":"api/7.0.0/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.1/","text":"API Docs - v7.0.1 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.1"},{"location":"api/7.0.1/#api-docs-v701","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.1"},{"location":"api/7.0.1/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.1/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.1/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/7.0.1/#store","text":"","title":"Store"},{"location":"api/7.0.1/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.10/","text":"API Docs - v7.0.10 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.10"},{"location":"api/7.0.10/#api-docs-v7010","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.10"},{"location":"api/7.0.10/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.10/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.10/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.10/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values.","title":"query (Stream Processor)"},{"location":"api/7.0.10/#store","text":"","title":"Store"},{"location":"api/7.0.10/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.11/","text":"API Docs - v7.0.11 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.11"},{"location":"api/7.0.11/#api-docs-v7011","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.11"},{"location":"api/7.0.11/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.11/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.11/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.11/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values.","title":"query (Stream Processor)"},{"location":"api/7.0.11/#store","text":"","title":"Store"},{"location":"api/7.0.11/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.12/","text":"API Docs - v7.0.12 Tested Siddhi Core version: 5.1.20 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.12"},{"location":"api/7.0.12/#api-docs-v7012","text":"Tested Siddhi Core version: 5.1.20 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.12"},{"location":"api/7.0.12/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.12/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.12/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.12/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values.","title":"query (Stream Processor)"},{"location":"api/7.0.12/#store","text":"","title":"Store"},{"location":"api/7.0.12/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.13/","text":"API Docs - v7.0.13 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.13"},{"location":"api/7.0.13/#api-docs-v7013","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.13"},{"location":"api/7.0.13/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.13/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.13/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.13/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values.","title":"query (Stream Processor)"},{"location":"api/7.0.13/#store","text":"","title":"Store"},{"location":"api/7.0.13/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.14/","text":"API Docs - v7.0.14 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.14"},{"location":"api/7.0.14/#api-docs-v7014","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.14"},{"location":"api/7.0.14/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.14/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.14/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.14/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values.","title":"query (Stream Processor)"},{"location":"api/7.0.14/#store","text":"","title":"Store"},{"location":"api/7.0.14/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.15/","text":"API Docs - v7.0.15 Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.15"},{"location":"api/7.0.15/#api-docs-v7015","text":"Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.15"},{"location":"api/7.0.15/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.15/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.15/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.15/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values.","title":"query (Stream Processor)"},{"location":"api/7.0.15/#store","text":"","title":"Store"},{"location":"api/7.0.15/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.16/","text":"API Docs - v7.0.16 Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.16"},{"location":"api/7.0.16/#api-docs-v7016","text":"Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.16"},{"location":"api/7.0.16/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.16/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.16/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.16/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values.","title":"query (Stream Processor)"},{"location":"api/7.0.16/#store","text":"","title":"Store"},{"location":"api/7.0.16/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.17/","text":"API Docs - v7.0.17 Tested Siddhi Core version: 5.1.24 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.17"},{"location":"api/7.0.17/#api-docs-v7017","text":"Tested Siddhi Core version: 5.1.24 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.17"},{"location":"api/7.0.17/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.17/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.17/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.17/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values.","title":"query (Stream Processor)"},{"location":"api/7.0.17/#store","text":"","title":"Store"},{"location":"api/7.0.17/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.18/","text":"API Docs - v7.0.18 Tested Siddhi Core version: 5.1.24 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING transaction.correlation.id) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., STRING transaction.correlation.id) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes transaction.correlation.id If provided, CUD functions having the same transaction.correlation.id will use the same connection object when interacting with the database. The connection object will not be closed until a commit or rollback query is explicitly performed via a CUD function. This is useful when performing transactions with commit and rollback. CUD functions without a transaction.correlation.id will use their own connection object, which will be closed at the end of the operation. Note that, when using transaction.correlation.id , the developer should make sure that, a commit or rollback operation is performed via a CUD operation, after all the events - that are supposed to be committed/rolled back are added to the batch . STRING Yes No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false allow.null.params.with.CUD When set to 'true', this parameter allows the RDBMS CUD function to acceptparameters with NULL values. When set to 'false', NULL parameters will not be allowed with CUD functions. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. EXAMPLE 3 from InsertStream#rdbms:cud( SAMPLE_DB , INSERT INTO Names(name) VALUES (?); , name, t1 ) select name insert into ignoreStream; from CommitStream#rdbms:cud( SAMPLE_DB , COMMIT , t1 ) select * insert into ignoreStream2; from RollbackStream#rdbms:cud( SAMPLE_DB , ROLLBACK , t1 ) select * insert into ignoreStream3; t1 is the transactionCorrelationId . Assume the following series of events arriving at InsertStream : {\"name\": \"A\"} , {\"name\": \"B\"} . A and B will not be immediately committed to the Names table. After these, if an event arrives at CommitStream , A and B will be committed, since the CommitStream performs a COMMIT . Instead of that, if an event arrives at RollbackStream , A and B will be rolled back, since the RollbackStream performs a ROLLBACK . procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.18"},{"location":"api/7.0.18/#api-docs-v7018","text":"Tested Siddhi Core version: 5.1.24 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.18"},{"location":"api/7.0.18/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.18/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING transaction.correlation.id) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., STRING transaction.correlation.id) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes transaction.correlation.id If provided, CUD functions having the same transaction.correlation.id will use the same connection object when interacting with the database. The connection object will not be closed until a commit or rollback query is explicitly performed via a CUD function. This is useful when performing transactions with commit and rollback. CUD functions without a transaction.correlation.id will use their own connection object, which will be closed at the end of the operation. Note that, when using transaction.correlation.id , the developer should make sure that, a commit or rollback operation is performed via a CUD operation, after all the events - that are supposed to be committed/rolled back are added to the batch . STRING Yes No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false allow.null.params.with.CUD When set to 'true', this parameter allows the RDBMS CUD function to acceptparameters with NULL values. When set to 'false', NULL parameters will not be allowed with CUD functions. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. EXAMPLE 3 from InsertStream#rdbms:cud( SAMPLE_DB , INSERT INTO Names(name) VALUES (?); , name, t1 ) select name insert into ignoreStream; from CommitStream#rdbms:cud( SAMPLE_DB , COMMIT , t1 ) select * insert into ignoreStream2; from RollbackStream#rdbms:cud( SAMPLE_DB , ROLLBACK , t1 ) select * insert into ignoreStream3; t1 is the transactionCorrelationId . Assume the following series of events arriving at InsertStream : {\"name\": \"A\"} , {\"name\": \"B\"} . A and B will not be immediately committed to the Names table. After these, if an event arrives at CommitStream , A and B will be committed, since the CommitStream performs a COMMIT . Instead of that, if an event arrives at RollbackStream , A and B will be rolled back, since the RollbackStream performs a ROLLBACK .","title":"cud (Stream Processor)"},{"location":"api/7.0.18/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.18/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values.","title":"query (Stream Processor)"},{"location":"api/7.0.18/#store","text":"","title":"Store"},{"location":"api/7.0.18/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.19/","text":"API Docs - v7.0.19 Tested Siddhi Core version: 5.1.24 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:cud( STRING datasource.name, STRING query, STRING transaction.correlation.id) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING transaction.correlation.id) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., STRING transaction.correlation.id) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes transaction.correlation.id If provided, CUD functions having the same transaction.correlation.id will use the same connection object when interacting with the database. The connection object will not be closed until a commit or rollback query is explicitly performed via a CUD function. This is useful when performing transactions with commit and rollback. CUD functions without a transaction.correlation.id will use their own connection object, which will be closed at the end of the operation. Note that, when using transaction.correlation.id , the developer should make sure that, a commit or rollback operation is performed via a CUD operation, after all the events - that are supposed to be committed/rolled back are added to the batch . STRING Yes No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false allow.null.params.with.CUD When set to 'true', this parameter allows the RDBMS CUD function to acceptparameters with NULL values. When set to 'false', NULL parameters will not be allowed with CUD functions. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. EXAMPLE 3 from InsertStream#rdbms:cud( SAMPLE_DB , INSERT INTO Names(name) VALUES (?); , name, t1 ) select name insert into ignoreStream; from CommitStream#rdbms:cud( SAMPLE_DB , COMMIT , t1 ) select * insert into ignoreStream2; from RollbackStream#rdbms:cud( SAMPLE_DB , ROLLBACK , t1 ) select * insert into ignoreStream3; t1 is the transactionCorrelationId . Assume the following series of events arriving at InsertStream : {\"name\": \"A\"} , {\"name\": \"B\"} . A and B will not be immediately committed to the Names table. After these, if an event arrives at CommitStream , A and B will be committed, since the CommitStream performs a COMMIT . Instead of that, if an event arrives at RollbackStream , A and B will be rolled back, since the RollbackStream performs a ROLLBACK . procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.19"},{"location":"api/7.0.19/#api-docs-v7019","text":"Tested Siddhi Core version: 5.1.24 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.19"},{"location":"api/7.0.19/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.19/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:cud( STRING datasource.name, STRING query, STRING transaction.correlation.id) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING transaction.correlation.id) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., STRING transaction.correlation.id) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes transaction.correlation.id If provided, CUD functions having the same transaction.correlation.id will use the same connection object when interacting with the database. The connection object will not be closed until a commit or rollback query is explicitly performed via a CUD function. This is useful when performing transactions with commit and rollback. CUD functions without a transaction.correlation.id will use their own connection object, which will be closed at the end of the operation. Note that, when using transaction.correlation.id , the developer should make sure that, a commit or rollback operation is performed via a CUD operation, after all the events - that are supposed to be committed/rolled back are added to the batch . STRING Yes No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false allow.null.params.with.CUD When set to 'true', this parameter allows the RDBMS CUD function to acceptparameters with NULL values. When set to 'false', NULL parameters will not be allowed with CUD functions. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. EXAMPLE 3 from InsertStream#rdbms:cud( SAMPLE_DB , INSERT INTO Names(name) VALUES (?); , name, t1 ) select name insert into ignoreStream; from CommitStream#rdbms:cud( SAMPLE_DB , COMMIT , t1 ) select * insert into ignoreStream2; from RollbackStream#rdbms:cud( SAMPLE_DB , ROLLBACK , t1 ) select * insert into ignoreStream3; t1 is the transactionCorrelationId . Assume the following series of events arriving at InsertStream : {\"name\": \"A\"} , {\"name\": \"B\"} . A and B will not be immediately committed to the Names table. After these, if an event arrives at CommitStream , A and B will be committed, since the CommitStream performs a COMMIT . Instead of that, if an event arrives at RollbackStream , A and B will be rolled back, since the RollbackStream performs a ROLLBACK .","title":"cud (Stream Processor)"},{"location":"api/7.0.19/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.19/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values.","title":"query (Stream Processor)"},{"location":"api/7.0.19/#store","text":"","title":"Store"},{"location":"api/7.0.19/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.2/","text":"API Docs - v7.0.2 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attirbutes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.2"},{"location":"api/7.0.2/#api-docs-v702","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.2"},{"location":"api/7.0.2/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.2/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.2/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/7.0.2/#store","text":"","title":"Store"},{"location":"api/7.0.2/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attirbutes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.3/","text":"API Docs - v7.0.3 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attirbutes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.3"},{"location":"api/7.0.3/#api-docs-v703","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.3"},{"location":"api/7.0.3/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.3/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.3/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/7.0.3/#store","text":"","title":"Store"},{"location":"api/7.0.3/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attirbutes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.4/","text":"API Docs - v7.0.4 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attirbutes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.4"},{"location":"api/7.0.4/#api-docs-v704","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.4"},{"location":"api/7.0.4/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.4/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.4/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/7.0.4/#store","text":"","title":"Store"},{"location":"api/7.0.4/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attirbutes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.5/","text":"API Docs - v7.0.5 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attirbutes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.5"},{"location":"api/7.0.5/#api-docs-v705","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.5"},{"location":"api/7.0.5/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.5/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.5/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/7.0.5/#store","text":"","title":"Store"},{"location":"api/7.0.5/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attirbutes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.6/","text":"API Docs - v7.0.6 Tested Siddhi Core version: 5.1.12 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attirbutes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.6"},{"location":"api/7.0.6/#api-docs-v706","text":"Tested Siddhi Core version: 5.1.12 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.6"},{"location":"api/7.0.6/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.6/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.6/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.6/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/7.0.6/#store","text":"","title":"Store"},{"location":"api/7.0.6/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attirbutes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.7/","text":"API Docs - v7.0.7 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attirbutes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.7"},{"location":"api/7.0.7/#api-docs-v707","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.7"},{"location":"api/7.0.7/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.7/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.7/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.7/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/7.0.7/#store","text":"","title":"Store"},{"location":"api/7.0.7/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attirbutes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.8/","text":"API Docs - v7.0.8 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.8"},{"location":"api/7.0.8/#api-docs-v708","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.8"},{"location":"api/7.0.8/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.8/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.8/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.8/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/7.0.8/#store","text":"","title":"Store"},{"location":"api/7.0.8/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/7.0.9/","text":"API Docs - v7.0.9 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"7.0.9"},{"location":"api/7.0.9/#api-docs-v709","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.9"},{"location":"api/7.0.9/#rdbms","text":"","title":"Rdbms"},{"location":"api/7.0.9/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.","title":"cud (Stream Processor)"},{"location":"api/7.0.9/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/7.0.9/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.","title":"query (Stream Processor)"},{"location":"api/7.0.9/#store","text":"","title":"Store"},{"location":"api/7.0.9/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"},{"location":"api/latest/","text":"API Docs - v7.0.19 Tested Siddhi Core version: 5.1.24 It could also support other Siddhi Core minor versions. Rdbms cud (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:cud( STRING datasource.name, STRING query, STRING transaction.correlation.id) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING transaction.correlation.id) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., STRING transaction.correlation.id) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes transaction.correlation.id If provided, CUD functions having the same transaction.correlation.id will use the same connection object when interacting with the database. The connection object will not be closed until a commit or rollback query is explicitly performed via a CUD function. This is useful when performing transactions with commit and rollback. CUD functions without a transaction.correlation.id will use their own connection object, which will be closed at the end of the operation. Note that, when using transaction.correlation.id , the developer should make sure that, a commit or rollback operation is performed via a CUD operation, after all the events - that are supposed to be committed/rolled back are added to the batch . STRING Yes No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false allow.null.params.with.CUD When set to 'true', this parameter allows the RDBMS CUD function to acceptparameters with NULL values. When set to 'false', NULL parameters will not be allowed with CUD functions. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. EXAMPLE 3 from InsertStream#rdbms:cud( SAMPLE_DB , INSERT INTO Names(name) VALUES (?); , name, t1 ) select name insert into ignoreStream; from CommitStream#rdbms:cud( SAMPLE_DB , COMMIT , t1 ) select * insert into ignoreStream2; from RollbackStream#rdbms:cud( SAMPLE_DB , ROLLBACK , t1 ) select * insert into ignoreStream3; t1 is the transactionCorrelationId . Assume the following series of events arriving at InsertStream : {\"name\": \"A\"} , {\"name\": \"B\"} . A and B will not be immediately committed to the Names table. After these, if an event arrives at CommitStream , A and B will be committed, since the CommitStream performs a COMMIT . Instead of that, if an event arrives at RollbackStream , A and B will be rolled back, since the RollbackStream performs a ROLLBACK . procedure (Stream Processor) This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example query (Stream Processor) This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values. Store rdbms (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"latest"},{"location":"api/latest/#api-docs-v7019","text":"Tested Siddhi Core version: 5.1.24 It could also support other Siddhi Core minor versions.","title":"API Docs - v7.0.19"},{"location":"api/latest/#rdbms","text":"","title":"Rdbms"},{"location":"api/latest/#cud-stream-processor","text":"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:cud( STRING datasource.name, STRING query) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:cud( STRING datasource.name, STRING query, STRING transaction.correlation.id) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING transaction.correlation.id) rdbms:cud( STRING datasource.name, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., STRING transaction.correlation.id) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No query The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes transaction.correlation.id If provided, CUD functions having the same transaction.correlation.id will use the same connection object when interacting with the database. The connection object will not be closed until a commit or rollback query is explicitly performed via a CUD function. This is useful when performing transactions with commit and rollback. CUD functions without a transaction.correlation.id will use their own connection object, which will be closed at the end of the operation. Note that, when using transaction.correlation.id , the developer should make sure that, a commit or rollback operation is performed via a CUD operation, after all the events - that are supposed to be committed/rolled back are added to the batch . STRING Yes No System Parameters Name Description Default Value Possible Parameters perform.CUD.operations If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. false true false allow.null.params.with.CUD When set to 'true', this parameter allows the RDBMS CUD function to acceptparameters with NULL values. When set to 'false', NULL parameters will not be allowed with CUD functions. false true false Extra Return Attributes Name Description Possible Types numRecords The number of records manipulated by the query. INT Examples EXAMPLE 1 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName='abc' where customerName='xyz' ) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. EXAMPLE 2 from TriggerStream#rdbms:cud( SAMPLE_DB , UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) select numRecords insert into RecordStream; This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query. EXAMPLE 3 from InsertStream#rdbms:cud( SAMPLE_DB , INSERT INTO Names(name) VALUES (?); , name, t1 ) select name insert into ignoreStream; from CommitStream#rdbms:cud( SAMPLE_DB , COMMIT , t1 ) select * insert into ignoreStream2; from RollbackStream#rdbms:cud( SAMPLE_DB , ROLLBACK , t1 ) select * insert into ignoreStream3; t1 is the transactionCorrelationId . Assume the following series of events arriving at InsertStream : {\"name\": \"A\"} , {\"name\": \"B\"} . A and B will not be immediately committed to the Names table. After these, if an event arrives at CommitStream , A and B will be committed, since the CommitStream performs a COMMIT . Instead of that, if an event arrives at RollbackStream , A and B will be rolled back, since the RollbackStream performs a ROLLBACK .","title":"cud (Stream Processor)"},{"location":"api/latest/#procedure-stream-processor","text":"This function execute stored procedure and retrieve data to siddhi . Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:procedure( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING output.parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes output.parameter This is provided as a comma-separated list in the ' AttributeType ' format. This AttributeType should be supported by the Database data type STRING Yes Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes System Parameters Name Description Default Value Possible Parameters database_type This parameter should be set in deployment yaml file inorder to initialize the procedure function. WSO2_CARBON_DB:oracle WSO2_CARBON_DB:oracle Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(?,?); end;','cursor', NoOfYears) select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter value will provided from the IntrimStream and the parameter is NoOfYears EXAMPLE 2 from IntrimStream#rdbms:procedure('ORACLE_DB', 'Name String, Age int,Date_Time String', 'begin RETURNCON(9,?); end;','cursor') select Name, Age, Date_Time insert into tempStream1; This will execute the stored procedure RETURNCON() which is defined in the database and return the attributes Name, Age and Date_Time as the output. Above RETURNCON() Stored Procedure accepts two parameters, one is a input parameter and the other one is an output parameter, in this case it's a 'cursor'. input parameter is provided in the query itself in this example","title":"procedure (Stream Processor)"},{"location":"api/latest/#query-stream-processor","text":"This function performs SQL retrieval queries on data sources. Note: This function to work data sources should be set at the Siddhi Manager level. Syntax rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, BOOL ack.empty.result.set) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ...) rdbms:query( STRING datasource.name, STRING attribute.definition.list, STRING query, STRING|BOOL|INT|DOUBLE|FLOAT|LONG parameter, STRING|BOOL|INT|DOUBLE|FLOAT|LONG ..., BOOL ack.empty.result.set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic datasource.name The name of the datasource for which the query should be performed. If Siddhi is used as a Java/Python library the datasource should be explicitly set in the siddhi manager in order for the function to work. STRING No No attribute.definition.list This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. Mapping of the Siddhi data type to the database data type can be done as follows, Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT STRING No No query The select query(formatted according to the relevant database type) that needs to be performed STRING No Yes parameter If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters STRING BOOL INT DOUBLE FLOAT LONG Yes Yes ack.empty.result.set When the parameter is set to true , the return attributes will contain null values if the result set is empty. If the parameter is set to false , the function wont return any attributes. false BOOL Yes No Extra Return Attributes Name Description Possible Types attributeName The return attributes will be the ones defined in the parameter attribute.definition.list . STRING INT LONG DOUBLE FLOAT BOOL Examples EXAMPLE 1 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string, transaction string, amount int', 'select * from Transactions_Table') select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). EXAMPLE 2 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord) select creditcardno, country, transaction, amount insert into recordStream; Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource. EXAMPLE 3 from TriggerStream#rdbms:query('SAMPLE_DB', 'creditcardno string, country string,transaction string, amount int', 'select * from where country=?', countrySearchWord, true) select creditcardno, country, transaction, amount insert into recordStream; If there are no events in the table which satisfies the given query with creditcardno parameter, the event which gets selected by creditcardno, country, transaction and amount will contain NULL values.","title":"query (Stream Processor)"},{"location":"api/latest/#store","text":"","title":"Store"},{"location":"api/latest/#rdbms-store","text":"This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected data sources. A new improvement is added when running with SI / SI Tooling 1.1.0 or higher product pack, where an external configuration file can be provided to read supported RDBMS databases. Prerequisites - Configuration file needed to be added to [Product_Home]/conf/siddhi/rdbms path with the configuration file name as rdbms-table-config.xml , database name=\u201d[Database_Name]\u201d for each database name should be the equivalent database product name returned from java sql Connection.getMetaData().getDatabaseProductName() as shown in API documentation https://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getDatabaseProductName()).Sample Configuration for one of the databases can be as follows, ?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"? rdbms-table-configuration database name=\"Teradata\" tableCreateQuery CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) /tableCreateQuery tableCheckQuery SELECT 1 FROM {{TABLE_NAME}} SAMPLE 1 /tableCheckQuery indexCreateQuery CREATE INDEX {{TABLE_NAME}} INDEX {{INDEX_NUM}} ({{INDEX_COLUMNS}}) ON {{TABLE_NAME}} /indexCreateQuery recordExistsQuery SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} SAMPLE 1 /recordExistsQuery recordSelectQuery SELECT * FROM {{TABLE_NAME}} {{CONDITION}} /recordSelectQuery recordInsertQuery INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) /recordInsertQuery recordUpdateQuery UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} /recordUpdateQuery recordDeleteQuery DELETE FROM {{TABLE_NAME}} {{CONDITION}} /recordDeleteQuery recordContainsCondition ({{COLUMNS}} LIKE {{VALUES}}) /recordContainsCondition selectQueryTemplate selectClause SELECT {{SELECTORS}} FROM {{TABLE_NAME}} /selectClause selectQueryWithSubSelect SELECT {{SELECTORS}} FROM {{TABLE_NAME}}, ( {{INNER_QUERY}} ) AS t2 /selectQueryWithSubSelect whereClause WHERE {{CONDITION}} /whereClause groupByClause GROUP BY {{COLUMNS}} /groupByClause havingClause HAVING {{CONDITION}} /havingClause orderByClause ORDER BY {{COLUMNS}} /orderByClause limitClause SAMPLE {{Q}} /limitClause /selectQueryTemplate stringSize 254 /stringSize batchEnable true /batchEnable batchSize 1000 /batchSize typeMapping binaryType typeName BLOB /typeName typeValue 2004 /typeValue /binaryType booleanType typeName SMALLINT /typeName typeValue 5 /typeValue /booleanType doubleType typeName FLOAT /typeName typeValue 8 /typeValue /doubleType floatType typeName FLOAT /typeName typeValue 6 /typeValue /floatType integerType typeName INTEGER /typeName typeValue 4 /typeValue /integerType longType typeName BIGINT /typeName typeValue -5 /typeValue /longType stringType typeName VARCHAR /typeName typeValue 12 /typeValue /stringType /typeMapping /database /rdbms-table-configuration Syntax @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING , table.check.query= STRING , use.collation= BOOL , allow.null.values= BOOL ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic jdbc.url The JDBC URL via which the RDBMS data store is accessed. STRING No No username The username to be used to access the RDBMS data store. STRING No No password The password to be used to access the RDBMS data store. STRING No No jdbc.driver.name The driver class name for connecting the RDBMS data store. STRING No No pool.properties Any pool parameters for the database connection must be specified as key-value pairs. null STRING Yes No jndi.resource The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. null STRING Yes No datasource The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. Only works in Siddhi Distribution null STRING Yes No table.name The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. The table name defined in the Siddhi App query. STRING Yes No field.length The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. null STRING Yes No table.check.query This query will be used to check whether the table is exist in the given database. But the provided query should return an SQLException if the table does not exist in the database. Furthermore if the provided table is a database view, and it is not exists in the database a table from given name will be created in the database The tableCheckQuery which define in store rdbms configs STRING Yes No use.collation This property allows users to use collation for string attributes. By default it's false and binary collation is not used. Currently 'latin1_bin' and 'SQL_Latin1_General_CP1_CS_AS' are used as collations for MySQL and Microsoft SQL database types respectively. false BOOL Yes No allow.null.values This property allows users to insert null values to the numeric columns. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters {{RDBMS-Name}}.maxVersion The latest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.minVersion The earliest version supported for {{RDBMS-Name}}. 0 N/A {{RDBMS-Name}}.tableCheckQuery The template query for the 'check table' operation in {{RDBMS-Name}}. H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) N/A {{RDBMS-Name}}.tableCreateQuery The template query for the 'create table' operation in {{RDBMS-Name}}. H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.indexCreateQuery The template query for the 'create index' operation in {{RDBMS-Name}}. H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) N/A {{RDBMS-Name}}.recordInsertQuery The template query for the 'insert record' operation in {{RDBMS-Name}}. H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) N/A {{RDBMS-Name}}.recordUpdateQuery The template query for the 'update record' operation in {{RDBMS-Name}}. H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} N/A {{RDBMS-Name}}.recordSelectQuery The template query for the 'select record' operation in {{RDBMS-Name}}. H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.recordExistsQuery The template query for the 'check record existence' operation in {{RDBMS-Name}}. H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY N/A {{RDBMS-Name}}.recordDeleteQuery The query for the 'delete record' operation in {{RDBMS-Name}}. H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} N/A {{RDBMS-Name}}.stringSize This defines the length for the string fields in {{RDBMS-Name}}. H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 N/A {{RDBMS-Name}}.fieldSizeLimit This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A 0 = n = INT_MAX {{RDBMS-Name}}.batchSize This defines the batch size when operations are performed for batches of events. H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 N/A {{RDBMS-Name}}.batchEnable This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.transactionSupported This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true N/A {{RDBMS-Name}}.typeMapping.binaryType This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) N/A {{RDBMS-Name}}.typeMapping.booleanType This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT N/A {{RDBMS-Name}}.typeMapping.doubleType This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE N/A {{RDBMS-Name}}.typeMapping.floatType This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL N/A {{RDBMS-Name}}.typeMapping.integerType This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER N/A {{RDBMS-Name}}.typeMapping.longType This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT N/A {{RDBMS-Name}}.typeMapping.stringType This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) N/A {{RDBMS-Name}}.typeMapping.bigStringType This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A N/A Examples EXAMPLE 1 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 ) @PrimaryKey( id , symbol ) @Index( volume ) define table StockTable (id string, symbol string, price float, volume long); The above example creates an event table named 'StockTable' in the database if it does not already exist (with four attributes named id , symbol , price , and volume of the types 'string', 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The @PrimaryKey() and @Index() annotations can be used to define primary keys or indexes for the table and they follow Siddhi query syntax. RDBMS store supports having more than one attributes in the @PrimaryKey or @Index annotations. In this example a composite Primary key of both attributes id and symbol will be created. EXAMPLE 2 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)] EXAMPLE 3 @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , table.name= StockTable , username= root , password= root , jdbc.driver.name= org.h2.Driver , field.length= symbol:100 , table.check.query= SELECT 1 FROM StockTable LIMIT 1 ) @PrimaryKey( symbol ) @Index( symbol ) define table StockTable (symbol string, price float, volume long); define stream InputStream (symbol string, volume long); from InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol) select a.symbol as symbol, b.volume as volume insert into FooStream; The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons( = = == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute or Search.String)]","title":"rdbms (Store)"}]}